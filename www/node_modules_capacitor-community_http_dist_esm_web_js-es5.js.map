{"version":3,"sources":["webpack:///node_modules/@capacitor-community/http/dist/esm/cookie.js","webpack:///node_modules/@capacitor-community/http/dist/esm/request.js","webpack:///node_modules/@capacitor-community/http/dist/esm/utils.js","webpack:///node_modules/@capacitor-community/http/dist/esm/web.js"],"names":["setCookie","key","value","options","encodedKey","encode","encodedValue","expires","replace","path","document","cookie","getCookies","output","map","cookies","split","k","v","decode","trim","entries","Object","push","getCookie","deleteCookie","clearCookies","Date","toUTCString","normalizeHttpHeaders","headers","originalKeys","keys","loweredKeys","toLocaleLowerCase","normalized","reduce","acc","index","buildUrlParams","params","shouldEncode","accumulator","entry","item","Array","isArray","forEach","str","encodeURIComponent","slice","substr","buildRequestInit","extra","assign","method","type","includes","URLSearchParams","data","set","body","toString","form","FormData","append","Headers","JSON","stringify","request","requestInit","webFetchExtra","urlParams","shouldEncodeUrlParams","url","fetch","response","contentType","get","ok","responseType","blob","readBlobAsBase64","json","text","status","post","put","patch","del","Promise","resolve","reject","reader","FileReader","onload","base64String","result","base64StringWithoutTags","indexOf","onerror","error","readAsDataURL","decodeURIComponent","escape","HttpWeb","getCookiesMap","uploadFile","formData","name","fetchOptions","downloadFile","progress","Blob","getReader","bytes","chunks","contentLength","parseInt","read","done","length","notifyListeners","allChunks","Uint8Array","position","chunk","buffer","undefined","WebPlugin"],"mappings":"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","file":"node_modules_capacitor-community_http_dist_esm_web_js-es5.js","sourcesContent":["import { encode, decode } from './utils';\n/**\n * Set a cookie\n * @param key The key to set\n * @param value The value to set\n * @param options Optional additional parameters\n */\nexport const setCookie = (key, value, options = {}) => {\n    // Safely Encoded Key/Value\n    const encodedKey = encode(key);\n    const encodedValue = encode(value);\n    // Clean & sanitize options\n    const expires = `; expires=${(options.expires || '').replace('expires=', '')}`; // Default is \"; expires=\"\n    const path = (options.path || '/').replace('path=', ''); // Default is \"path=/\"\n    document.cookie = `${encodedKey}=${encodedValue || ''}${expires}; path=${path}`;\n};\n/**\n * Gets all HttpCookies\n */\nexport const getCookies = () => {\n    const output = [];\n    const map = {};\n    if (!document.cookie) {\n        return output;\n    }\n    const cookies = document.cookie.split(';') || [];\n    for (const cookie of cookies) {\n        // Replace first \"=\" with CAP_COOKIE to prevent splitting on additional \"=\"\n        let [k, v] = cookie.replace(/=/, 'CAP_COOKIE').split('CAP_COOKIE');\n        k = decode(k).trim();\n        v = decode(v).trim();\n        map[k] = v;\n    }\n    const entries = Object.entries(map);\n    for (const [key, value] of entries) {\n        output.push({\n            key,\n            value,\n        });\n    }\n    return output;\n};\n/**\n * Gets a single HttpCookie given a key\n */\nexport const getCookie = (key) => {\n    const cookies = getCookies();\n    for (const cookie of cookies) {\n        if (cookie.key === key) {\n            return cookie;\n        }\n    }\n    return {\n        key,\n        value: '',\n    };\n};\n/**\n * Deletes a cookie given a key\n * @param key The key of the cookie to delete\n */\nexport const deleteCookie = (key) => {\n    document.cookie = `${key}=; Max-Age=0`;\n};\n/**\n * Clears out cookies by setting them to expire immediately\n */\nexport const clearCookies = () => {\n    const cookies = document.cookie.split(';') || [];\n    for (const cookie of cookies) {\n        document.cookie = cookie\n            .replace(/^ +/, '')\n            .replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n    }\n};\n//# sourceMappingURL=cookie.js.map","import { readBlobAsBase64 } from './utils';\n/**\n * Normalize an HttpHeaders map by lowercasing all of the values\n * @param headers The HttpHeaders object to normalize\n */\nconst normalizeHttpHeaders = (headers = {}) => {\n    const originalKeys = Object.keys(headers);\n    const loweredKeys = Object.keys(headers).map(k => k.toLocaleLowerCase());\n    const normalized = loweredKeys.reduce((acc, key, index) => {\n        acc[key] = headers[originalKeys[index]];\n        return acc;\n    }, {});\n    return normalized;\n};\n/**\n * Builds a string of url parameters that\n * @param params A map of url parameters\n * @param shouldEncode true if you should encodeURIComponent() the values (true by default)\n */\nconst buildUrlParams = (params, shouldEncode = true) => {\n    if (!params)\n        return null;\n    const output = Object.entries(params).reduce((accumulator, entry) => {\n        const [key, value] = entry;\n        let encodedValue;\n        let item;\n        if (Array.isArray(value)) {\n            item = '';\n            value.forEach(str => {\n                encodedValue = shouldEncode ? encodeURIComponent(str) : str;\n                item += `${key}=${encodedValue}&`;\n            });\n            // last character will always be \"&\" so slice it off\n            item.slice(0, -1);\n        }\n        else {\n            encodedValue = shouldEncode ? encodeURIComponent(value) : value;\n            item = `${key}=${encodedValue}`;\n        }\n        return `${accumulator}&${item}`;\n    }, '');\n    // Remove initial \"&\" from the reduce\n    return output.substr(1);\n};\n/**\n * Build the RequestInit object based on the options passed into the initial request\n * @param options The Http plugin options\n * @param extra Any extra RequestInit values\n */\nexport const buildRequestInit = (options, extra = {}) => {\n    const output = Object.assign({ method: options.method || 'GET', headers: options.headers }, extra);\n    // Get the content-type\n    const headers = normalizeHttpHeaders(options.headers);\n    const type = headers['content-type'] || '';\n    // Build request initializers based off of content-type\n    if (type.includes('application/x-www-form-urlencoded')) {\n        const params = new URLSearchParams();\n        for (const [key, value] of Object.entries(options.data || {})) {\n            params.set(key, value);\n        }\n        output.body = params.toString();\n    }\n    else if (type.includes('multipart/form-data')) {\n        const form = new FormData();\n        if (options.data instanceof FormData) {\n            options.data.forEach((value, key) => {\n                form.append(key, value);\n            });\n        }\n        else {\n            for (let key of Object.keys(options.data)) {\n                form.append(key, options.data[key]);\n            }\n        }\n        output.body = form;\n        const headers = new Headers(output.headers);\n        headers.delete('content-type'); // content-type will be set by `window.fetch` to includy boundary\n        output.headers = headers;\n    }\n    else if (type.includes('application/json') ||\n        typeof options.data === 'object') {\n        output.body = JSON.stringify(options.data);\n    }\n    return output;\n};\n/**\n * Perform an Http request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const request = async (options) => {\n    const requestInit = buildRequestInit(options, options.webFetchExtra);\n    const urlParams = buildUrlParams(options.params, options.shouldEncodeUrlParams);\n    const url = urlParams ? `${options.url}?${urlParams}` : options.url;\n    const response = await fetch(url, requestInit);\n    const contentType = response.headers.get('content-type') || '';\n    // Default to 'text' responseType so no parsing happens\n    let { responseType = 'text' } = response.ok ? options : {};\n    // If the response content-type is json, force the response to be json\n    if (contentType.includes('application/json')) {\n        responseType = 'json';\n    }\n    let data;\n    switch (responseType) {\n        case 'arraybuffer':\n        case 'blob':\n            const blob = await response.blob();\n            data = await readBlobAsBase64(blob);\n            break;\n        case 'json':\n            data = await response.json();\n            break;\n        case 'document':\n        case 'text':\n        default:\n            data = await response.text();\n    }\n    // Convert fetch headers to Capacitor HttpHeaders\n    const headers = {};\n    response.headers.forEach((value, key) => {\n        headers[key] = value;\n    });\n    return {\n        data,\n        headers,\n        status: response.status,\n        url: response.url,\n    };\n};\n/**\n * Perform an Http GET request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const get = async (options) => request(Object.assign(Object.assign({}, options), { method: 'GET' }));\n/**\n * Perform an Http POST request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const post = async (options) => request(Object.assign(Object.assign({}, options), { method: 'POST' }));\n/**\n * Perform an Http PUT request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const put = async (options) => request(Object.assign(Object.assign({}, options), { method: 'PUT' }));\n/**\n * Perform an Http PATCH request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const patch = async (options) => request(Object.assign(Object.assign({}, options), { method: 'PATCH' }));\n/**\n * Perform an Http DELETE request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const del = async (options) => request(Object.assign(Object.assign({}, options), { method: 'DELETE' }));\n//# sourceMappingURL=request.js.map","/**\n * Read in a Blob value and return it as a base64 string\n * @param blob The blob value to convert to a base64 string\n */\nexport const readBlobAsBase64 = async (blob) => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n        const base64String = reader.result;\n        const base64StringWithoutTags = base64String.substr(base64String.indexOf(',') + 1); // remove prefix \"data:application/pdf;base64,\"\n        resolve(base64StringWithoutTags);\n    };\n    reader.onerror = (error) => reject(error);\n    reader.readAsDataURL(blob);\n});\n/**\n * Safely web encode a string value (inspired by js-cookie)\n * @param str The string value to encode\n */\nexport const encode = (str) => encodeURIComponent(str)\n    .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n    .replace(/[()]/g, escape);\n/**\n * Safely web decode a string value (inspired by js-cookie)\n * @param str The string value to decode\n */\nexport const decode = (str) => str.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent);\n//# sourceMappingURL=utils.js.map","import { WebPlugin } from '@capacitor/core';\nimport * as Cookie from './cookie';\nimport * as Request from './request';\nexport class HttpWeb extends WebPlugin {\n    constructor() {\n        super();\n        /**\n         * Perform an Http request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.request = async (options) => Request.request(options);\n        /**\n         * Perform an Http GET request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.get = async (options) => Request.get(options);\n        /**\n         * Perform an Http POST request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.post = async (options) => Request.post(options);\n        /**\n         * Perform an Http PUT request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.put = async (options) => Request.put(options);\n        /**\n         * Perform an Http PATCH request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.patch = async (options) => Request.patch(options);\n        /**\n         * Perform an Http DELETE request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.del = async (options) => Request.del(options);\n        /**\n         * Gets all HttpCookies as a Map\n         */\n        this.getCookiesMap = async () => {\n            const cookies = Cookie.getCookies();\n            const output = {};\n            for (const cookie of cookies) {\n                output[cookie.key] = cookie.value;\n            }\n            return output;\n        };\n        /**\n         * Get all HttpCookies as an object with the values as an HttpCookie[]\n         */\n        this.getCookies = async (options) => {\n            // @ts-ignore\n            const { url } = options;\n            const cookies = Cookie.getCookies();\n            return { cookies };\n        };\n        /**\n         * Set a cookie\n         * @param key The key to set\n         * @param value The value to set\n         * @param options Optional additional parameters\n         */\n        this.setCookie = async (options) => {\n            const { key, value, expires = '', path = '' } = options;\n            Cookie.setCookie(key, value, { expires, path });\n        };\n        /**\n         * Gets all cookie values unless a key is specified, then return only that value\n         * @param key The key of the cookie value to get\n         */\n        this.getCookie = async (options) => Cookie.getCookie(options.key);\n        /**\n         * Deletes a cookie given a key\n         * @param key The key of the cookie to delete\n         */\n        this.deleteCookie = async (options) => Cookie.deleteCookie(options.key);\n        /**\n         * Clears out cookies by setting them to expire immediately\n         */\n        this.clearCookies = async (\n        // @ts-ignore\n        options) => Cookie.clearCookies();\n        /**\n         * Uploads a file through a POST request\n         * @param options TODO\n         */\n        this.uploadFile = async (options) => {\n            const formData = new FormData();\n            formData.append(options.name, options.blob || 'undefined');\n            const fetchOptions = Object.assign(Object.assign({}, options), { body: formData, method: 'POST' });\n            return this.post(fetchOptions);\n        };\n        /**\n         * Downloads a file\n         * @param options TODO\n         */\n        this.downloadFile = async (options) => {\n            const requestInit = Request.buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            let blob;\n            if (!(options === null || options === void 0 ? void 0 : options.progress))\n                blob = await response.blob();\n            else if (!(response === null || response === void 0 ? void 0 : response.body))\n                blob = new Blob();\n            else {\n                const reader = response.body.getReader();\n                let bytes = 0;\n                let chunks = [];\n                const contentType = response.headers.get('content-type');\n                const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                    const status = {\n                        type: 'DOWNLOAD',\n                        url: options.url,\n                        bytes,\n                        contentLength,\n                    };\n                    this.notifyListeners('progress', status);\n                }\n                let allChunks = new Uint8Array(bytes);\n                let position = 0;\n                for (const chunk of chunks) {\n                    if (typeof chunk === 'undefined')\n                        continue;\n                    allChunks.set(chunk, position);\n                    position += chunk.length;\n                }\n                blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n            }\n            return {\n                blob,\n            };\n        };\n    }\n}\n//# sourceMappingURL=web.js.map"]}